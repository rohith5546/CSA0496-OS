#include <stdio.h>
#define MAX_PROCESSES 5
#define MAX_RESOURCES 3
int available[MAX_RESOURCES];  
int maximum[MAX_PROCESSES][MAX_RESOURCES]; 
int allocation[MAX_PROCESSES][MAX_RESOURCES]; 
int need[MAX_PROCESSES][MAX_RESOURCES]; 
int isSafeState(int processes, int resources) {
    int work[MAX_RESOURCES];
    int finish[MAX_PROCESSES] = {0}; 
    int safeSequence[MAX_PROCESSES]; 
    int count = 0;
    for (int i = 0; i < resources; i++)
        work[i] = available[i];
    while (count < processes) {
        int found = 0;
        for (int i = 0; i < processes; i++) {
            if (!finish[i]) { 
                int canExecute = 1;
                for (int j = 0; j < resources; j++) {
                    if (need[i][j] > work[j]) {
                        canExecute = 0; 
                        break;
                    }
                }
                if (canExecute) { 
                    for (int j = 0; j < resources; j++)
                        work[j] += allocation[i][j];
                    safeSequence[count++] = i;
                    finish[i] = 1;
                    found = 1;
                }
            }
        }
        if (!found) { 
            printf("System is in an unsafe state! Deadlock may occur.\n");
            return 0;
        }
    }
    printf("System is in a safe state. Safe sequence: ");
    for (int i = 0; i < processes; i++)
        printf("%d ", safeSequence[i]);
    printf("\n");
    return 1;
}
int main() {
    int processes = 5, resources = 3
    int exampleAvailable[] = {3, 3, 2};
    int exampleMaximum[][MAX_RESOURCES] = {
        {7, 5, 3}, {3, 2, 2}, {9, 0, 2}, {2, 2, 2}, {4, 3, 3}
    };
    int exampleAllocation[][MAX_RESOURCES] = {
        {0, 1, 0}, {2, 0, 0}, {3, 0, 2}, {2, 1, 1}, {0, 0, 2}
    };
    for (int i = 0; i < resources; i++)
        available[i] = exampleAvailable[i];
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            maximum[i][j] = exampleMaximum[i][j];
            allocation[i][j] = exampleAllocation[i][j];
            need[i][j] = maximum[i][j] - allocation[i][j]; 
        }
}
    isSafeState(processes, resources);

    return 0;
}
