#include <stdio.h>
#define MAX 3  // Number of frames
int findOptimal(int frame[], int pages[], int n, int index) {
    int farthest = -1, replaceIndex = -1;
    for (int i = 0; i < MAX; i++) {
        int found = 0;
        for (int j = index; j < n; j++) {
            if (frame[i] == pages[j]) {
                found = 1;
                if (j > farthest) {
                    farthest = j;
                    replaceIndex = i;
                }
                break;
            }
        }
        if (!found) return i;
    }
    return replaceIndex;
}
void Optimal(int pages[], int n) {
    int frame[MAX] = {-1}, pageFaults = 0;
    for (int i = 0; i < n; i++) {
        int page = pages[i], found = 0;
        for (int j = 0; j < MAX; j++) {
            if (frame[j] == page) {
                found = 1;
                break;
            }
        }
        if (!found) {
            int replaceIndex = findOptimal(frame, pages, n, i + 1);
            frame[replaceIndex] = page;
            pageFaults++;
        }
        printf("Page %d: ", page);
        for (int j = 0; j < MAX; j++) {
            if (frame[j] != -1) printf("%d ", frame[j]);
        }
        printf("\n");
    }
    printf("Total Page Faults: %d\n", pageFaults);
}

int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3};
    int n = sizeof(pages) / sizeof(pages[0]);
    Optimal(pages, n);
    return 0;
}
