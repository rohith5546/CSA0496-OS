#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#define NUM_PHILOSOPHERS 5
pthread_mutex_t forks[NUM_PHILOSOPHERS];

void* philosopher(void* num) {
    int philosopher = *((int*)num);

    while (1) {
        printf("Philosopher %d is thinking.\n", philosopher);
        usleep(1000000); 
        
        pthread_mutex_lock(&forks[philosopher]); 
        pthread_mutex_lock(&forks[(philosopher + 1) % NUM_PHILOSOPHERS]); 

        printf("Philosopher %d is eating.\n", philosopher);
        usleep(1000000);

        pthread_mutex_unlock(&forks[philosopher]); 
        pthread_mutex_unlock(&forks[(philosopher + 1) % NUM_PHILOSOPHERS]);
    }

    return NULL;
}

int main() {
    pthread_t threads[NUM_PHILOSOPHERS];
    int philosopher_numbers[NUM_PHILOSOPHERS];
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_numbers[i] = i;
        pthread_create(&threads[i], NULL, philosopher, &philosopher_numbers[i]);
    }
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(threads[i], NULL);
    }
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}
